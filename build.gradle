plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
}

group = 'com.myretail.product'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

jar {
	archiveBaseName = "retail-product-api"
	archiveVersion = "1.0.0"
}

repositories {
	mavenCentral()
	maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

ext {
	set('springCloudVersion', "Hoxton.RELEASE")
	swaggerVersion = '3.0.0-SNAPSHOT'
	cucumberVersion = '4.8.0'
}

dependencies {
	implementation(
			"org.springframework.boot:spring-boot-starter-actuator",
			"org.springframework.boot:spring-boot-starter-webflux",
			"org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j",
			"org.springframework.cloud:spring-cloud-starter-sleuth",
			"io.springfox:springfox-swagger-ui:${swaggerVersion}",
			"io.springfox:springfox-swagger2:${swaggerVersion}",
			"io.springfox:springfox-spring-webflux:${swaggerVersion}",
			"org.springframework.boot:spring-boot-starter-data-mongodb-reactive"

	)

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation(
			"io.cucumber:cucumber-java:${cucumberVersion}",
			"io.projectreactor:reactor-test",
			"io.cucumber:cucumber-junit:${cucumberVersion}",
			"io.cucumber:cucumber-spring:${cucumberVersion}"
	)
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()

	testLogging {
		exceptionFormat 'full'
		events "PASSED", "STARTED", "FAILED", "SKIPPED"
	}

	afterTest { desc, result ->
		logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}

	afterSuite {
		desc, result ->

			String RESET = "\u001B[0m"
			String GREEN = "\u001B[32m"
			String RED = "\u001B[31m"
			String WHITE = "\u001B[37m"
			String BLUE = "\u001B[34m"
			String YELLOW = "\u001B[33m"

			def resultTypeStyle = WHITE

			switch(result.resultType) {
				case TestResult.ResultType.SUCCESS:
					resultTypeStyle = GREEN
					break
				case TestResult.ResultType.FAILURE:
					resultTypeStyle = RED
					break
			}

			def currentResult = "\n" + BLUE + "${project.name.toUpperCase()}" + RESET +
					"Results: " + resultTypeStyle + "${result.resultType}" + RESET + " (${result.testCount} tests, " +
					GREEN + "${result.successfulTestCount} success, " + RESET +
					RED + "${result.failedTestCount} failures, " + RESET +
					YELLOW + "${result.skippedTestCount} skipped)" + RESET

			println currentResult
	}
 }
